.step.slide#iterators[data-x=x_succ data-y=0]
  q
    span Iteradores
    small  continua se caso...

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | while rand(1000) != 666
            puts "not the beast!"
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.8em; line-height: 1.4em"]
        | File.open('file.txt').lines
          while true
            begin
              line = lines.next
              #...
            rescue StopIteration => e
              break
            end
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.7em"]
        | puts "not six!" while rand(10) != 6

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.7em"]
        | colors = %w{red green blue}
          for color in colors
            puts color
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | colors = %w{red green blue}
          colors.each do |color|
            puts color
          end

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | prices = [11.0, 25.9, 40.2]
          prices.map{|p| p*2 }
          # [22.0, 51.8, 80.4] 

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | ages = [20, 18, 32]
          ages.map{|age| age.next }
          => [21, 19, 33] 
          ages.map &:next
          => [21, 19, 33]


.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | ages = [22, 16, 44]
          ages.select{|age| age > 17 }
          # [22, 44] 

.step.slide.exercise[data-x=x_succ data-y=0]
  = image_tag 'http://cdn1.iconfinder.com/data/icons/oldschool_babasse/Png/Hardware/ordinateur%20off.png'
  q[style="font-size:1.3em"] Sete uma variável com um número aleatório até 100. Peça para o usuário digitar um número. Informe se o número é menor ou maior que o aleatório e peça um número novamente até que ele acerte.

.step.slide.exercise[data-x=x_succ data-y=0]
  = image_tag 'http://cdn1.iconfinder.com/data/icons/oldschool_babasse/Png/Hardware/ordinateur%20off.png'
  q Agora pense: qual o número mínimo de vezes que o usuário tem que chutar o número para ter certeza que acertou? Tem como criar um código para isso?