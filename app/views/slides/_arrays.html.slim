.step.slide#arrays[data-x=x_succ data-y=0]
  q
    span Arrays 
    small são listinhas de compras

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | lista = [
            'arroz', 'feijão',
            'massa', 'café']
          lista.class #Array

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | idades = [12, 16, 44, 98]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | [22, 7.5, 'hey', true, []]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | #%w
          states = %w(rj rs sc sp)
          states = %w[rj rs sc sp]
          #...

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | Array.new(3)
          # [nil, nil, nil]
          Array.new(3, "hi!")
          # ["hi!", "hi!", "hi!"]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | "2012-03-01".split("-")
          # [2012, 03, 01]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.85em"]
        | friends = %w(joe peter may)
          friends[0] #joe
          friends[1] #peter
          friends[2] #may
          friends[1..2] #["peter", "may"]
          friends.first #joe
          friends.last #may

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | [1,2] << 3 #[1,2,3]
          [1,2].push(3) #[1,2,3]
          [1,2].unshift(0) #[0,1,2]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [1,2] + [3,4]
          # [1,2,3,4]
          %w(rj rs sc sp) - %w(rj sp)
          # ["rs", "sc"]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [4,8,16].size #3

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [].empty? #true
          [9].empty? #false

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [1,2,3].combination(2).to_a
          # [[1, 2], [1, 3], [2, 3]] 

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [1,nil,3].compact
          # [1, 3]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [7,8,9].index(8) #1

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | [[1,2], [3,4]].flatten
          # [1, 2, 3, 4]

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | %w(rs sc pr).include?("rs")
          #true

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | %w(rs sc pr).join(",")
          # "rs,sc,pr"

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | numbers = [9, 21, 7, 14, 5]
          numbers.sort
            #[5, 7, 9, 14, 21]
          numbers.sort.reverse
            #[21, 14, 9, 7, 5]
          # pegar um aleatoriamente
          numbers.sample #14

.step.slide.code[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.9em"]
        | %w(me you me).uniq
            # ["me", "you"]

.step.slide.exercise[data-x=x_succ data-y=0]
  q Faça um código que converta uma data em formato japonês (e.g. 2012-10-20) em uma no formato brasileiro (e.g. 20/10/2012).