.step.slide#methods[data-x=x_succ data-y=0]
  q
    span MÃ©todos

.step.slide.describe_context[data-x=x_succ data-y=0]
  q
    | describe / context
    pre
      code[class="ruby"]
        | describe "user" do
            context "without parameters" do
              #tests


.step.slide.it[data-x=x_succ data-y=0]
  q
    | it
    pre
      code[class="ruby"]
        | it "should be true" do
            #test 

.step.slide.pending[data-x=x_succ data-y=0]
  q
    | pending / xit
    pre
      code[class="ruby"]
        | pending "not implemented yet"

          xit "should be true" do
            #tests
          end

.step.slide.hooks[data-x=x_succ data-y=0]
  q
    | Hooks
    pre
      code[class="ruby"]
        | before(:all) {} #:each / :suite
          after(:all) {} #:each / :suite

.step.slide.matchers[data-x=x_succ data-y=0]
  q
    | Matchers
          
.step.slide.be[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby" style="font-size:0.85em; line-height: 1.5em;"]
        | false.should_not be_true
          10.should be < 20
          1.should be_true
          @newUser.should be_an_instance_of(User)
          55.should be_within(10).of(60)

          

.step.slide.others[data-x=x_succ data-y=0]
  q
    pre
      code[class="ruby"]
        | @user.should exists
          @impares.should include(3,7)
          @user.should respond_to(:logout)

.step.slide.predicados[data-x=x_succ data-y=0]
  q
    | Metodos predicados
    pre
      code[class="ruby"]
        | 1.odd?.should be_true
          1.should be_odd

.step.slide.sujeito[data-x=x_succ data-y=0]
  q
    | Sujeito
    pre
      code[class="ruby"]
        | describe User do
            subject { User.new :name => "Foo"}

            it{ should be_an_instance_of(User) }
            its(:name){ should be == "Foo"}